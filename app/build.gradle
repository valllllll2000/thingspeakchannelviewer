apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'


android {
    compileSdk rootProject.ext.compileSdkVersion
    Properties versionProps = loadProperties('version.properties')
    def versionCodeProperty = versionProps['VERSION_CODE'].toInteger()
    defaultConfig {
        applicationId "com.vaxapp.thingspeak.viewer"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        versionCode versionCodeProperty
        versionName "1.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField("String", "THINGSPEAK_API_KEY", "\"${getKeyProperty('THINGSPEAK_API_KEY')}\"")
    }
    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug-key/debug.keystore')
            storePassword 'android'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFile 'proguard-files/proguard-rules.pro'
            proguardFile 'proguard-files/proguard-gson.pro'
            proguardFile 'proguard-files/proguard-rxjava.pro'
            proguardFile 'proguard-files/proguard-square-retrofit.pro'
            proguardFile 'proguard-files/proguard-support-v7-appcompat.pro'
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding = true
        compose true
    }
    namespace 'com.vaxapp.thingspeak.viewer'
    kotlinOptions {
        jvmTarget = '1.8'
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.5'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

// Function to read properties from the file
def getKeyProperty(key) {
    Properties properties = new Properties()
    File propertiesFile = rootProject.file('keys.properties')
    if (propertiesFile.exists()) {
        properties.load(propertiesFile.newDataInputStream())
        return properties.getProperty(key)
    } else {
        return "" // Or handle the case when the file is missing
    }
}

private Properties loadProperties(String fileName) {
    Properties versionProps = new Properties()
    def versionPropsFile = file(fileName)
    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
    } else {
        throw new GradleException("Could not read ".fileName)
    }
    versionProps
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.2'
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.2")
    implementation 'androidx.activity:activity-compose:1.9.0'
    implementation platform('androidx.compose:compose-bom:2023.08.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.work:work-runtime-ktx:2.9.0'
    implementation 'androidx.compose.ui:ui-text-google-fonts:1.6.8'
    androidTestImplementation platform('androidx.compose:compose-bom:2023.08.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    implementation("androidx.datastore:datastore-preferences:1.1.1")
    implementation("io.insert-koin:koin-android:3.3.3")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.8.2")

    def appDependencies = rootProject.ext.appDependencies
    def testDependencies = rootProject.ext.testDependencies
    def androidTestDependencies = rootProject.ext.androidTestDependencies

    implementation appDependencies.kotlin
    implementation appDependencies.rxAndroid
    implementation appDependencies.appCompat
    implementation appDependencies.vectorDrawable
    implementation appDependencies.recyclerView
    implementation appDependencies.material
    implementation appDependencies.constraintLayout
    implementation appDependencies.retrofit
    implementation appDependencies.adapterRxJava
    implementation appDependencies.converterGson
    implementation appDependencies.okHttp
    implementation(appDependencies.crashlytics) {
        transitive = true
    }

    testImplementation testDependencies.jUnit

    androidTestImplementation androidTestDependencies.supportTestRunner
    androidTestImplementation androidTestDependencies.espressoCore
}
